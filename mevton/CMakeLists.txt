cmake_minimum_required(VERSION 3.5)
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
set(CMAKE_POLICY_DEFAULT_CMP0074 NEW)

set(CMAKE_CXX_STANDARD 17)
set(gRPC_USE_STATIC_LIBS ON)

find_package(Protobuf CONFIG REQUIRED)
find_package(grpc REQUIRED)

if(NOT TARGET protobuf::protoc)
    message(FATAL_ERROR "Can not find target protoc")
endif()
get_target_property(_gRPC_PROTOBUF_PROTOC_EXECUTABLE protobuf::protoc LOCATION)
get_target_property(_gRPC_CPP_PLUGIN gRPC::grpc_cpp_plugin LOCATION)
get_target_property(_gRPC_PROTOBUF_WELLKNOWN_INCLUDE_DIR protobuf::libprotobuf INTERFACE_INCLUDE_DIRECTORIES)

message(STATUS "Found protoc ${_gRPC_PROTOBUF_PROTOC_EXECUTABLE}")
message(STATUS "Found grpc-cpp-pluggin ${_gRPC_CPP_PLUGIN}")
message(STATUS "Found protobuf include dir ${_gRPC_PROTOBUF_WELLKNOWN_INCLUDE_DIR}")

set(_gRPC_PROTO_GENS_DIR ${CMAKE_BINARY_DIR}/grpc-gens)
file(MAKE_DIRECTORY ${_gRPC_PROTO_GENS_DIR})

function(target_add_protobuf target)
    if(NOT TARGET ${target})
        message(FATAL_ERROR "Target ${target} doesn't exist")
    endif()
    if(NOT ARGN)
        message(SEND_ERROR "Error: PROTOBUF_GENERATE_GRPC_CPP() called without any proto files")
        return()
    endif()

    set(_protobuf_include_path -I . -I ${CMAKE_CURRENT_SOURCE_DIR}/grpc/proto -I ${_gRPC_PROTOBUF_WELLKNOWN_INCLUDE_DIR})

    foreach(FIL ${ARGN})
        get_filename_component(ABS_FIL grpc/proto/${FIL} ABSOLUTE)
        get_filename_component(FIL_WE ${FIL} NAME_WE)
        file(RELATIVE_PATH REL_FIL ${CMAKE_CURRENT_SOURCE_DIR}/grpc/proto ${ABS_FIL})
        get_filename_component(REL_DIR ${REL_FIL} DIRECTORY)

        message(STATUS "${FIL} - ABS ${ABS_FIL}")
        message(STATUS "${FIL} - FIL_WE ${FIL_WE}")
        message(STATUS "${FIL} - REL_FIL ${REL_FIL}")
        message(STATUS "${FIL} - REL_DIR ${REL_DIR}")

        if(NOT REL_DIR)
            set(RELFIL_WE "${FIL_WE}")
        else()
            set(RELFIL_WE "${REL_DIR}/${FIL_WE}")
        endif()

        if(NOT TARGET gRPC::grpc_cpp_plugin)
            message(FATAL_ERROR "Can not find target grpc_cpp_plugin")
        endif()

        add_custom_command(
        OUTPUT  "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.grpc.pb.cc"
                "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.grpc.pb.h"
                "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}_mock.grpc.pb.h"
                "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.pb.cc"
                "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.pb.h"
        COMMAND ${_gRPC_PROTOBUF_PROTOC_EXECUTABLE}
        ARGS --grpc_out=generate_mock_code=true:${_gRPC_PROTO_GENS_DIR}
            --cpp_out=${_gRPC_PROTO_GENS_DIR}
            --plugin=protoc-gen-grpc=${_gRPC_CPP_PLUGIN}
            ${_protobuf_include_path}
            ${FIL}
        DEPENDS ${ABS_FIL} ${_gRPC_PROTOBUF_PROTOC} ${_gRPC_CPP_PLUGIN}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Running gRPC C++ protocol buffer compiler on ${FIL}"
        VERBATIM)

        target_sources(${target} PRIVATE
            "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.grpc.pb.cc"
            "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.grpc.pb.h"
            "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}_mock.grpc.pb.h"
            "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.pb.cc"
            "${_gRPC_PROTO_GENS_DIR}/${RELFIL_WE}.pb.h"
        )
        target_include_directories(${target} PRIVATE
            $<BUILD_INTERFACE:${_gRPC_PROTO_GENS_DIR}>
            $<BUILD_INTERFACE:${_gRPC_PROTOBUF_WELLKNOWN_INCLUDE_DIR}>
            $<BUILD_INTERFACE:${grpc_SOURCE_DIR}/include>
        )
    endforeach()
endfunction()

set(MEVTON_HDRS mevton.h)
set(MEVTON_SRCS mevton.cpp SafeQueue.h)

add_library(mevton STATIC ${MEVTON_HDRS} ${MEVTON_SRCS})

target_add_protobuf(mevton dto.proto)
target_add_protobuf(mevton auth.proto)
target_add_protobuf(mevton block_engine.proto)
target_add_protobuf(mevton searcher.proto)

message(STATUS "_gRPC_PROTO_GENS_DIR ${_gRPC_PROTO_GENS_DIR}")

target_include_directories(mevton
        PUBLIC
        ${grpc_SOURCE_DIR}/include
        ${_gRPC_PROTOBUF_WELLKNOWN_INCLUDE_DIR}
        ${_gRPC_PROTO_GENS_DIR}
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..
)
target_link_libraries(mevton PUBLIC tdactor tl-utils gRPC::grpc gRPC::grpc++ protobuf::libprotobuf)